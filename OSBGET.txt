

LEADER:
Wait for high tone by:
.. count duration of tape pulse
.. .. Carry set if loops >= 8 and Zero set if loops == 8
.. .. Carry clear if loops < 8
.. .. X = count (but X == 0 means no change detected)
.. .. .. keep testing #B002 for changes from 0 to 1 and 1 to 0.
.. if Carry Set (>=8 loops of 33ms) - low pulse detected
.. otherwise (<8 loops of 33ms) - high pulse detected


: In the alternate ("300 baud") data encoding format, a zero bit is encoded as four complete cycles at the base frequency. A one bit is eight complete cycles at twice the base frequency.


High pulse - this is 8 complete cycles in the 8*33ms (8*33 = 264, 8*26 = 208)

Need 4096 (#1000) cycles of the high pulse (THIS IS ABOUT 1 SECOND at 1mHz)


To write this leader: #FC40.  Send 00000111 to #B002 and wait for a keypress! The bit pattern means (intensity/colourset, loudspeaker, 2.4khz and tape output)


//need to be filling buffers with waveform for 0's and 1's
So inside tapes.js - need to be outputting 00001111000011110000111100001111 to get a low frequency pulse (base frequency, 4 cycles)
and  00110011001100110011001100110011 to get a high frequency pulse (2*base frequency, 8 cycles)

0011001100110011 (low freq)
0101010101010101 (high freq)

The frequency is 2400hz   or each cycle is 1/2400 = 0.000416666... secs

so that's 0s for 1/2400 and 1s for 1/2400  (2*base freq)
or that's 0s for 1/1200 and 1s for 1/1200  (base freq)

for 8 cycles at high freq or 4 cycles at low freq it will take 0.003333...

The high freq is tested by looking for less than 8 cycles before a transition from 0 to 1 or 1 to 0
The low freq is tested by looking for more than 8 cycles before a transition from 0 to 1 or 1 to 0

(for high freq test)
It take 33us to make 1 cycle for this test.  6.3 cycles is 33us * 6.3 = 208 us (or 0.208ms)
2 cycles is one pulse (from 0 to 1 and back to 0) 16- 0.416ms
8 pulses is one bit - 3.328ms - 300.5baud

(for low freq test)
It take 33us to make 1 cycle for this test.  12.6 cycles is 33us * 12 = 416 us (or 0.416ms)
2 cycles is one pulse (from 0 to 1 and back to 0) - 0.832ms
4 pulses is one bit - 3.328ms - 300.5baud


FOR 1:  a 0 needs sending for 208us then 1 for 208us  - 8 times
FOR 0:  a 0 needs sending for 2*208us  then 1 for 2*208us  - 4 times

cycle time is 1/0.000208 (4800hz)


- Byte format consists of: 1 '0' start bit
                           8     data bits
                           1 '1' stop bit








FB81: the wait for 0.5 seconds is set a counter to 30 and wait for 30 x 60ths of a second.

FB83: Using CRT flyback (FE66) to register a 60th

FB8E - read header and test for unnamed
i.e. wait 2 seconds - this is 4096 cycles (0x1000)
Cpu runs at 1Mhz - 1,000,000 clocks per second.  

FCBD - 
Then read 4 bytes ‘****’ using OSBGET : Y = number of bytes to read

Workspace for OSBGET is D8 to D4 backwards
Transition counter - first ‘0’ START BIT - 8 BITS then ‘1’ STOP BIT
8 transitions is a 0 and 16 transitions is a 1.  OSBGET checks against 12 - if it reaches 12 then got a 1

Takes 3.3ms to get through a loop 53 times and the transitions indicate a 1 or 0

Get pulse from B002 and use FCCD to test it.

ROR : Carry flag is shifted into bit 7 and bit 0 is shifted into carry


=== OSBPUT
Send 10 bits for each byte - 1 start 8 data 1 stop - bit to send is stored in CARRY using FC90 to decide

To Send a 1 - 8 cycles of 2.4khz, (3LSBs of PIA set high). (Bit 2 is loudspeaker!)
To Send a 0 - 4 cycles of 1.2khz, (2LSBs of PIA set low) tape output high Then set LSB of PIA high - tape output low 

Use FC9C to write a 0 - disable 2.4Khz, wait for falling edge output is high.  Tape out low - do this 4 times.
Do again but with next bit in the CARRY

Write 8 cycles of 2.4khz (a 1 bit for START but)

FCC2-FCC8
Test 255 times and then give up - did it find bit within 8 though?

FCBD - duration of tape pulse

FCCD - uses C5 to store the bit but Z is SET if there is NO change between last and current bit in b002

